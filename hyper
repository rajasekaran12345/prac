from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# 1. Create a simple 0/1 dataset
X, y = make_classification(
    n_samples=200,     # 200 rows
    n_features=4,      # 4 features
    n_informative=3,   # 3 useful features
    n_redundant=0, 
    random_state=42
)

# 2. Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 3. Define model and parameter grid
model = RandomForestClassifier(random_state=42)
param_grid = {
    "n_estimators": [10, 50, 100],
    "max_depth": [None, 3, 5],
    "min_samples_split": [2, 5]
}

# 4. Hyperparameter tuning using GridSearchCV
grid = GridSearchCV(model, param_grid, cv=3, scoring="accuracy")
grid.fit(X_train, y_train)

# 5. Evaluate best model
best_model = grid.best_estimator_
y_pred = best_model.predict(X_test)

print("Best Parameters:", grid.best_params_)
print("Test Accuracy:", accuracy_score(y_test, y_pred))
