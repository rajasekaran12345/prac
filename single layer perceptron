import numpy as np

def perceptron_train(X, y, lr=0.1, epochs=20):
    w = np.zeros(X.shape[1]+1)
    for _ in range(epochs):
        for xi, yi in zip(X, y):
            xi_b = np.append(xi, 1)
            pred = 1 if np.dot(w, xi_b) >= 0 else 0
            error = yi - pred
            if error != 0:
                w += lr * error * xi_b
    return w

def predict_all(w, X):
    Xb = np.hstack([X, np.ones((X.shape[0],1))])
    preds = (Xb.dot(w) >= 0).astype(int)
    return preds

if __name__ == "__main__":
    X = np.array([[0,0],[0,1],[1,0],[1,1]])
    y = np.array([0,1,1,1])
    w = perceptron_train(X, y, lr=0.2, epochs=15)
    print("Final weights:", w)
    preds = predict_all(w, X)
    print("Predictions:", preds)
    print("Accuracy:", (preds==y).mean())
