import tensorflow as tf
import numpy as np

# Prepare dataset
X = np.array([[0,0],[0,1],[1,0],[1,1]], dtype=float)
y = np.array([[0],[1],[1],[1]], dtype=float)

def train_eval(hidden_size, lr):
    # Build model
    model = tf.keras.Sequential([
        tf.keras.layers.Input(shape=(2,)),
        tf.keras.layers.Dense(hidden_size, activation='sigmoid'),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])

    # Compile with binary crossentropy and Adam optimizer
    model.compile(optimizer=tf.keras.optimizers.SGD(learning_rate=lr),
                  loss='binary_crossentropy',
                  metrics=['accuracy'])

    # Train
    model.fit(X, y, epochs=2000, verbose=0)

    # Evaluate
    _, acc = model.evaluate(X, y, verbose=0)
    return acc

if __name__ == "__main__":
    hidden_options = [1, 2, 3, 4, 5]
    lr_options = [0.05, 0.1, 0.2, 0.5]
    best = (0, 0, 0)

    for h in hidden_options:
        for lr in lr_options:
            acc = train_eval(h, lr)
            print(f"Hidden {h}, lr {lr} -> acc {acc:.2f}")
            if acc > best[0]:
                best = (acc, h, lr)
    
    print("Best:", best)
