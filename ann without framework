import numpy as np

def relu(x): return np.maximum(0,x)
def relu_deriv(x): return (x>0).astype(float)
def sigmoid(x): return 1/(1+np.exp(-x))
def sigmoid_deriv(x): return x*(1-x)

class ManualANN:
    def __init__(self, n_in, n_hidden, n_out, lr=0.1):
        self.lr = lr
        self.W1 = np.random.randn(n_in, n_hidden) * 0.5
        self.b1 = np.zeros(n_hidden)
        self.W2 = np.random.randn(n_hidden, n_out) * 0.5
        self.b2 = np.zeros(n_out)

    def forward(self, X):
        self.z1 = X.dot(self.W1) + self.b1
        self.a1 = relu(self.z1)
        self.z2 = self.a1.dot(self.W2) + self.b2
        self.a2 = sigmoid(self.z2)
        return self.a2

    def backward(self, X, y):
        m = X.shape[0]
        error = self.a2 - y
        d2 = error * sigmoid_deriv(self.a2)
        dW2 = (self.a1.T.dot(d2)) / m
        db2 = d2.mean(axis=0)
        d1 = d2.dot(self.W2.T) * relu_deriv(self.z1)
        dW1 = (X.T.dot(d1)) / m
        db1 = d1.mean(axis=0)
        self.W2 -= self.lr * dW2
        self.b2 -= self.lr * db2
        self.W1 -= self.lr * dW1
        self.b1 -= self.lr * db1

    def train(self, X, y, epochs=1000):
        for _ in range(epochs):
            self.forward(X)
            self.backward(X, y)

    def predict(self, X):
        return (self.forward(X) >= 0.5).astype(int)

if __name__ == "__main__":
    X = np.array([[0,0],[0,1],[1,0],[1,1]], dtype=float)
    y = np.array([[0],[1],[1],[1]], dtype=float)
    model = ManualANN(2,3,1, lr=0.5)
    model.train(X,y,epochs=5000)
    print("Preds:", model.predict(X).flatten())
    print("True:", y.flatten())
